#version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: anb_postgres
    environment:
      - POSTGRES_DB=proyecto_1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - TZ=America/Bogota
    volumes:
      - ./db/001_create_users.down.sql:/docker-entrypoint-initdb.d/001_create_users.down.sql
      - ./db/001_create_users.up.sql:/docker-entrypoint-initdb.d/001_create_users.up.sql
      - ./db/002_create_videos.down.sql:/docker-entrypoint-initdb.d/002_create_videos.down.sql
      - ./db/002_create_videos.up.sql:/docker-entrypoint-initdb.d/002_create_videos.up.sql
      - ./db/003_create_votes.down.sql:/docker-entrypoint-initdb.d/003_create_votes.down.sql
      - ./db/003_create_votes.up.sql:/docker-entrypoint-initdb.d/003_create_votes.up.sql
      - ./db/004_create_task_results.down.sql:/docker-entrypoint-initdb.d/004_create_task_results.down.sql
      - ./db/004_create_task_results.up.sql:/docker-entrypoint-initdb.d/004_create_task_results.up.sql
      - ./db/005_create_user_sessions.down.sql:/docker-entrypoint-initdb.d/005_create_user_sessions.down.sql
      - ./db/005_create_user_sessions.up.sql:/docker-entrypoint-initdb.d/005_create_user_sessions.up.sql
      - ./db/006_create_views.down.sql:/docker-entrypoint-initdb.d/006_create_views.down.sql
      - ./db/006_create_views.up.sql:/docker-entrypoint-initdb.d/006_create_views.up.sql
      - ./db/007_create_triggers.down.sql:/docker-entrypoint-initdb.d/007_create_triggers.down.sql
      - ./db/007_create_triggers.up.sql:/docker-entrypoint-initdb.d/007_create_triggers.up.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - anb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d proyecto_1"]
      interval: 10s
      timeout: 5s
      retries: 5
#    deploy:
#      resources:
#        limits:
#          cpus: '0.3'     # Límite mínimo para PostgreSQL local
#          memory: 256M    # 256MB para desarrollo local
#        reservations:
#          cpus: '0.1'     # 0.05 CPU mínimo
#          memory: 128M    # 128MB mínimo

  redis:
    image: redis:7-alpine
    container_name: anb_redis
    environment:
      - TZ=America/Bogota
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - anb_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.4'     # 20 de CPU para Redis
          memory: 384M    # 384MB para Redis (20 de 2GB)
        reservations:
          cpus: '0.1'     # 0.05 CPU mínimo
          memory: 128M    # 128MB mínimo

  api:
    # Usar el Dockerfile específico para la API
    build:
      context: ./back
      dockerfile: Dockerfile.api
    container_name: anb_api
    # ports:
    #   - "8080:8080"  # No exponer directamente, usar nginx
    env_file:
      - ./back/.env
    environment:
      - TZ=America/Bogota
      # Server configuration
      - PORT=8080
      - HOST=0.0.0.0
      - GIN_MODE=debug
      
      # Database configuration
      - DB_DRIVER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=proyecto_1
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL_MODE=disable

      - REDIS_URL=redis:6379
      - JWT_SECRET=local-development-secret-key
      - JWT_EXPIRATION=1h
      - UPLOAD_PATH=/app/uploads
      - PROCESSED_PATH=/app/processed
      - MAX_FILE_SIZE=104857600
      - WORKER_CONCURRENCY=8
    volumes:
      - video_uploads:/app/uploads
      - video_processed:/app/processed
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - anb_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'     # 0.75 de CPU para API (en Web Server)
          memory: 1536M   # 0.75 de RAM para API (1.5GB)
        reservations:
          cpus: '0.8'     # Garantizar 0.40 CPU mínimo
          memory: 768M    # Garantizar 768MB mínimo

  # Worker 1 - Procesamiento principal con alta concurrencia
  worker1:
    build:
      context: ./back
      dockerfile: Dockerfile.worker
    container_name: anb_worker_1
    command: ./worker
    env_file:
      - ./back/.env
    environment:
      - TZ=America/Bogota
      - DB_DRIVER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=proyecto_1
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL_MODE=disable
      - REDIS_URL=redis:6379
      - WORKER_MODE=true
      - ENVIRONMENT=development
      - UPLOAD_PATH=/app/uploads
      - PROCESSED_PATH=/app/processed
      - WORKER_CONCURRENCY=${WORKER1_CONCURRENCY:-4}   # Concurrencia
    volumes:
      - video_uploads:/app/uploads
      - video_processed:/app/processed
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - anb_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.8'     # 0.90 de CPU para worker principal
          memory: 1600M   # 0.80 de RAM para worker principal (1.6GB)
        reservations:
          cpus: '1.0'     # Garantizar 0.50 CPU mínimo
          memory: 1024M   # Garantizar 1GB mínimo

  # Worker 2 - Worker secundario para balanceo de carga
#  worker2:
#    build:
#      context: ./back
#      dockerfile: Dockerfile.worker
#    container_name: anb_worker_2
#    command: ./worker
#    env_file:
#      - ./back/.env
#    environment:
#      - TZ=America/Bogota
#      - DB_DRIVER=postgres
#      - DB_HOST=postgres
#      - DB_PORT=5432
#      - DB_NAME=proyecto_1
#      - DB_USER=postgres
#      - DB_PASSWORD=password
#      - DB_SSL_MODE=disable
#      - REDIS_URL=redis:6379
#      - WORKER_MODE=true
#      - ENVIRONMENT=development
#      - UPLOAD_PATH=/app/uploads
#      - PROCESSED_PATH=/app/processed
#      - WORKER_CONCURRENCY=${WORKER2_CONCURRENCY:-2}   # Concurrencia
#    volumes:
#      - video_uploads:/app/uploads
#      - video_processed:/app/processed
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    networks:
#      - anb_network
#    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '0.8'     # 0.40 de CPU para worker secundario
#          memory: 512M    # 0.25 de RAM para worker secundario (512MB)
#        reservations:
#          cpus: '0.2'     # Garantizar 0.10 CPU mínimo
#          memory: 256M    # Garantizar 256MB mínimo

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost
        - VITE_APP_NAME=ANB Rising Stars Showcase
        - VITE_APP_VERSION=1.0.0
        - VITE_ENVIRONMENT=development
    container_name: anb_frontend
    #ports:
    #  - "3000:80"  # Puerto temporal para testing
    environment:
      - TZ=America/Bogota
    depends_on:
      - api
    networks:
      - anb_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'     # 0.15 de CPU para frontend
          memory: 2048M    # 2GB para frontend
        reservations:
          cpus: '0.1'     # 0.05 CPU mínimo
          memory: 128M    # 128MB mínimo
  
  nginx:
    image: nginx:alpine
    container_name: anb_nginx
    environment:
      - TZ=America/Bogota
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./back/nginx/nginx.conf:/etc/nginx/nginx.conf
      - video_processed:/usr/share/nginx/html/videos
    depends_on:
      - api
      - worker1
      #- worker2
      - frontend
    networks:
      - anb_network
    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '0.2'     # 0.10 de CPU para nginx
#          memory: 256M    # 256MB para nginx (0.125 de 2GB)
#        reservations:
#          cpus: '0.1'     # 0.05 CPU mínimo
#          memory: 64M     # 64MB mínimo

volumes:
  postgres_data:
  video_uploads:
  video_processed:
  frontend_modules:
  redis_data:

networks:
  anb_network:
    driver: bridge
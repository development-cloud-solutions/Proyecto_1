config:
  target: 'http://localhost:8080'
  http:
    timeout: 180
    pool: 40
    maxSockets: 40
    keepAlive: true
  phases:
    # Fase 1: Warmup (2 minutos)
    - duration: 120
      arrivalRate: 5
      name: "Warmup"
    # Fase 2: Carga Normal (5 minutos)
    - duration: 300
      arrivalRate: 25
      name: "Normal Load"
    # Fase 3: Carga Media (5 minutos)  
    - duration: 300
      arrivalRate: 50
      name: "Medium Load"
    # Fase 4: Carga Alta (3 minutos)
    - duration: 180
      arrivalRate: 100
      name: "High Load"
    # Fase 5: Carga Pico (2 minutos) - Reducida para videos
    - duration: 120
      arrivalRate: 50
      name: "Peak Load"
    # Fase 6: Recuperación (2 minutos)
    - duration: 120
      arrivalRate: 10
      name: "Recovery"
  payload:
    path: './load-test-data.csv'
    fields:
      - 'email'
      - 'first_name'
      - 'last_name'
      - 'city'
  variables:
    test_password: "StrongPass123"
  processor: "./processor.js"
    

scenarios:
  # Escenario 1: Navegación Básica (60% del tráfico)
  - name: "Health Check"
    weight: 20
    flow:
      - get:
          url: "/health"
          expect:
            - statusCode: 200
          capture:
            - json: "$.status"
              as: "health_status"

  - name: "Browse Public Videos"
    weight: 25
    flow:
      - get:
          url: "/api/public/videos"
          expect:
            - statusCode: 200
            - contentType: "application/json"
          capture:
            - json: "$[0].id"
              as: "video_id"
      - think: 2
      - get:
          url: "/api/public/rankings"
          expect:
            - statusCode: 200

  - name: "Check Rankings"
    weight: 15
    flow:
      - get:
          url: "/api/public/rankings"
          expect:
            - statusCode: 200
      - get:
          url: "/api/public/rankings"
          qs:
            limit: 10
            city: "Bogotá"
          expect:
            - statusCode: 200

  # Escenario 2: Registro y Autenticación (25% del tráfico)
  - name: "User Registration Flow"
    weight: 15
    flow:
      # Pausa para evitar burst de registros
      - think: 2
      - function: "generateUniqueEmail"
      - post:
          url: "/api/auth/signup"
          json:
            first_name: "{{ first_name }}"
            last_name: "{{ last_name }}"
            email: "{{ uniqueEmail }}"
            password1: "{{ test_password }}"
            password2: "{{ test_password }}"
            city: "{{ city }}"
            country: "Colombia"
          expect:
            - statusCode: 201
          capture:
            - json: "$.message"
              as: "signup_message"

  - name: "User Authentication Flow"
    weight: 10
    flow:
      # Pausa inicial
      - think: 3
      - function: "generateUniqueEmail"
      - post:
          url: "/api/auth/signup"
          json:
            first_name: "Auth{{ $randomNumber(1000, 9999) }}"
            last_name: "Test"
            email: "{{ uniqueEmail }}"
            password1: "{{ test_password }}"
            password2: "{{ test_password }}"
            city: "TestCity"
            country: "Colombia"
          expect:
            - statusCode: 201
          capture:
            - json: "$.message"
              as: "user_created"
      # Pausa entre signup y login
      - think: 2
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ uniqueEmail }}"
            password: "{{ test_password }}"
          expect:
            - statusCode: 200
          capture:
            - json: "$.access_token"
              as: "auth_token"

  # Escenario 3: Interacción Avanzada (15% del tráfico)
  - name: "Authenticated User Actions"
    weight: 10
    flow:
      - function: "generateUniqueEmail"
      - post:
          url: "/api/auth/signup"
          json:
            first_name: "LoadUser{{ $randomNumber(1000, 9999) }}"
            last_name: "Test"
            email: "{{ uniqueEmail }}"
            password1: "{{ test_password }}"
            password2: "{{ test_password }}"
            city: "{{ city }}"
            country: "Colombia"
          expect:
            - statusCode: 201
          capture:
            - json: "$.message"
              as: "signup_result"
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ uniqueEmail }}"
            password: "{{ test_password }}"
          expect:
            - statusCode: 200
          capture:
            - json: "$.access_token"
              as: "token"
      - get:
          url: "/api/videos"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: [200, 401]
      - think: 1
      - get:
          url: "/api/public/videos"
          capture:
            - json: "$[0].id"
              as: "public_video_id"
      - post:
          url: "/api/public/videos/{{ public_video_id }}/vote"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: [200, 400, 401, 404]

  - name: "Video Upload Flow"
    weight: 5
    flow:
      - function: "generateUniqueEmail"
      - post:
          url: "/api/auth/signup"
          json:
            first_name: "Uploader{{ $randomNumber(1000, 9999) }}"
            last_name: "Test"
            email: "{{ uniqueEmail }}"
            password1: "{{ test_password }}"
            password2: "{{ test_password }}"
            city: "{{ city }}"
            country: "Colombia"
          expect:
            - statusCode: 201
          capture:
            - json: "$.message"
              as: "uploader_created"
      - post:
          url: "/api/auth/login"
          json:
            email: "{{ uniqueEmail }}"
            password: "{{ test_password }}"
          expect:
            - statusCode: 200
          capture:
            - json: "$.access_token"
              as: "upload_token"
      - get:
          url: "/api/videos"
          headers:
            Authorization: "Bearer {{ upload_token }}"
          expect:
            - statusCode: [200, 401]
      # Verificar token antes del upload
      - get:
          url: "/api/videos"
          headers:
            Authorization: "Bearer {{ upload_token }}"
          expect:
            - statusCode: 200
      # Pausa antes del upload (crítico para reducir carga)
      - think: 5

      # Upload del video usando función personalizada
      - function: "uploadVideo"

      # Pausa después del upload
      - think: 2
